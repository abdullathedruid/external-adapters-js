on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # TODO: only if tests pass (needs: [test])
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        run: yarn
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish-artifacts step
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  # DOES NOT WORK: https://github.com/smartcontractkit/external-adapters-js/issues/77
  # publish-npm-packages:
  #   needs: [release]
  #   name: Publish NPM Packages
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     # Setup .npmrc file to publish to npm
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '12.x'
  #         registry-url: 'https://registry.npmjs.org'
  #         # Defaults to the user or organization that owns the workflow file
  #         scope: '@chainlink'
  #         always-auth: true
  #     - run: yarn
  #     # Publish @chainlink/external-adapter
  #     - run: yarn workspace @chainlink/external-adapter install
  #     - run: yarn workspace @chainlink/external-adapter publish --non-interactive --access public
  #     # Publish @chainlink/ea-bootstrap
  #     - run: yarn workspace @chainlink/ea-bootstrap install
  #     - run: yarn workspace @chainlink/ea-bootstrap publish --non-interactive --access public
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Read build strategy matrix of adapters, from a json file
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          content=`cat .github/strategy/adapters.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=matrix::$content"

  publish-artifacts:
    needs: [release, matrix-adapters]
    runs-on: ubuntu-latest
    name: Publish adapter zips (GitHub Release)
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Build
        run: make zip adapter=${{ matrix.adapter }}
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./${{ matrix.adapter }}/dist/${{ matrix.adapter }}-adapter.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-${{ matrix.adapter }}-adapter.zip
          asset_content_type: application/zip

  # Read build strategy matrix of composite adapters, from a json file
  matrix-composite-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          content=`cat .github/strategy/adapters-composite.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=matrix::$content"

  publish-composite-artifacts:
    needs: [release, matrix-composite-adapters]
    runs-on: ubuntu-latest
    name: Publish composite adapter zips (GitHub Release)
    strategy:
      matrix: ${{fromJson(needs.matrix-composite-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Build
        run: make zip adapter=composite/${{ matrix.adapter }} name=${{ matrix.adapter }}
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./composite/${{ matrix.adapter }}/dist/${{ matrix.adapter }}-adapter.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-${{ matrix.adapter }}-adapter.zip
          asset_content_type: application/zip

  # Read build strategy matrix of synth-index adapters, from a json file
  matrix-synth-index-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          content=`cat .github/strategy/adapters-synth-index.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=matrix::$content"

  publish-synth-index-artifacts:
    needs: [release, matrix-synth-index-adapters]
    name: Publish synth-index adapter zips (GitHub Release)
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix-synth-index-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Build
        run: make zip-synth-index adapter=${{ matrix.adapter }}
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./synth-index/${{ matrix.adapter }}/dist/synth-index-${{ matrix.adapter }}-adapter.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-synth-index-${{ matrix.adapter }}-adapter.zip
          asset_content_type: application/zip

  # Read build strategy matrix of market-closure adapters, from a json file
  matrix-market-closure-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          content=`cat .github/strategy/adapters-market-closure.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=matrix::$content"

  publish-market-closure-artifacts:
    needs: [release, matrix-market-closure-adapters]
    name: Publish market-closure adapter zips (GitHub Release)
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix-market-closure-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Build
        run: make zip-market-closure adapter=${{ matrix.adapter }} check=${{ matrix.check }}
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./market-closure/${{ matrix.check }}/dist/${{ matrix.adapter }}-${{ matrix.check }}-adapter.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-market-closure-${{ matrix.adapter }}-${{ matrix.check }}-adapter.zip
          asset_content_type: application/zip

  # Read build strategy matrix of 2-step adapters, from a json file
  matrix-2-step-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          content=`cat .github/strategy/adapters-2-step.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=matrix::$content"

  publish-2-step-artifacts:
    needs: [release, matrix-2-step-adapters]
    name: Publish 2-step adapter zips (GitHub Release)
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix-2-step-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Build
        run: make zip-2-step adapter=${{ matrix.adapter }}
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./2-step/${{ matrix.adapter }}/dist/${{ matrix.adapter }}-2-step-adapter.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-${{ matrix.adapter }}-2-step-adapter.zip
          asset_content_type: application/zip
